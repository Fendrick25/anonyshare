/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.anonyshare.kafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CommentAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -847542203244417345L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommentAvroModel\",\"namespace\":\"com.anonyshare.kafka.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"postId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"user\",\"type\":{\"type\":\"record\",\"name\":\"UserAvroModel\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"imageUrl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"content\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"likesCount\",\"type\":\"int\"},{\"name\":\"dislikeCount\",\"type\":\"int\"},{\"name\":\"createdAt\",\"type\":\"long\"},{\"name\":\"updatedAt\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<CommentAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CommentAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CommentAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CommentAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CommentAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CommentAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CommentAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CommentAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CommentAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.util.UUID postId;
  private com.anonyshare.kafka.model.UserAvroModel user;
  private java.lang.String content;
  private int likesCount;
  private int dislikeCount;
  private long createdAt;
  private long updatedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CommentAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param postId The new value for postId
   * @param user The new value for user
   * @param content The new value for content
   * @param likesCount The new value for likesCount
   * @param dislikeCount The new value for dislikeCount
   * @param createdAt The new value for createdAt
   * @param updatedAt The new value for updatedAt
   */
  public CommentAvroModel(java.util.UUID id, java.util.UUID postId, com.anonyshare.kafka.model.UserAvroModel user, java.lang.String content, java.lang.Integer likesCount, java.lang.Integer dislikeCount, java.lang.Long createdAt, java.lang.Long updatedAt) {
    this.id = id;
    this.postId = postId;
    this.user = user;
    this.content = content;
    this.likesCount = likesCount;
    this.dislikeCount = dislikeCount;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return postId;
    case 2: return user;
    case 3: return content;
    case 4: return likesCount;
    case 5: return dislikeCount;
    case 6: return createdAt;
    case 7: return updatedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: postId = (java.util.UUID)value$; break;
    case 2: user = (com.anonyshare.kafka.model.UserAvroModel)value$; break;
    case 3: content = value$ != null ? value$.toString() : null; break;
    case 4: likesCount = (java.lang.Integer)value$; break;
    case 5: dislikeCount = (java.lang.Integer)value$; break;
    case 6: createdAt = (java.lang.Long)value$; break;
    case 7: updatedAt = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'postId' field.
   * @return The value of the 'postId' field.
   */
  public java.util.UUID getPostId() {
    return postId;
  }


  /**
   * Sets the value of the 'postId' field.
   * @param value the value to set.
   */
  public void setPostId(java.util.UUID value) {
    this.postId = value;
  }

  /**
   * Gets the value of the 'user' field.
   * @return The value of the 'user' field.
   */
  public com.anonyshare.kafka.model.UserAvroModel getUser() {
    return user;
  }


  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(com.anonyshare.kafka.model.UserAvroModel value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'content' field.
   * @return The value of the 'content' field.
   */
  public java.lang.String getContent() {
    return content;
  }


  /**
   * Sets the value of the 'content' field.
   * @param value the value to set.
   */
  public void setContent(java.lang.String value) {
    this.content = value;
  }

  /**
   * Gets the value of the 'likesCount' field.
   * @return The value of the 'likesCount' field.
   */
  public int getLikesCount() {
    return likesCount;
  }


  /**
   * Sets the value of the 'likesCount' field.
   * @param value the value to set.
   */
  public void setLikesCount(int value) {
    this.likesCount = value;
  }

  /**
   * Gets the value of the 'dislikeCount' field.
   * @return The value of the 'dislikeCount' field.
   */
  public int getDislikeCount() {
    return dislikeCount;
  }


  /**
   * Sets the value of the 'dislikeCount' field.
   * @param value the value to set.
   */
  public void setDislikeCount(int value) {
    this.dislikeCount = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public long getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(long value) {
    this.createdAt = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public long getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   * @param value the value to set.
   */
  public void setUpdatedAt(long value) {
    this.updatedAt = value;
  }

  /**
   * Creates a new CommentAvroModel RecordBuilder.
   * @return A new CommentAvroModel RecordBuilder
   */
  public static com.anonyshare.kafka.model.CommentAvroModel.Builder newBuilder() {
    return new com.anonyshare.kafka.model.CommentAvroModel.Builder();
  }

  /**
   * Creates a new CommentAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CommentAvroModel RecordBuilder
   */
  public static com.anonyshare.kafka.model.CommentAvroModel.Builder newBuilder(com.anonyshare.kafka.model.CommentAvroModel.Builder other) {
    if (other == null) {
      return new com.anonyshare.kafka.model.CommentAvroModel.Builder();
    } else {
      return new com.anonyshare.kafka.model.CommentAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new CommentAvroModel RecordBuilder by copying an existing CommentAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new CommentAvroModel RecordBuilder
   */
  public static com.anonyshare.kafka.model.CommentAvroModel.Builder newBuilder(com.anonyshare.kafka.model.CommentAvroModel other) {
    if (other == null) {
      return new com.anonyshare.kafka.model.CommentAvroModel.Builder();
    } else {
      return new com.anonyshare.kafka.model.CommentAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for CommentAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommentAvroModel>
    implements org.apache.avro.data.RecordBuilder<CommentAvroModel> {

    private java.util.UUID id;
    private java.util.UUID postId;
    private com.anonyshare.kafka.model.UserAvroModel user;
    private com.anonyshare.kafka.model.UserAvroModel.Builder userBuilder;
    private java.lang.String content;
    private int likesCount;
    private int dislikeCount;
    private long createdAt;
    private long updatedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.anonyshare.kafka.model.CommentAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.postId)) {
        this.postId = data().deepCopy(fields()[1].schema(), other.postId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasUserBuilder()) {
        this.userBuilder = com.anonyshare.kafka.model.UserAvroModel.newBuilder(other.getUserBuilder());
      }
      if (isValidValue(fields()[3], other.content)) {
        this.content = data().deepCopy(fields()[3].schema(), other.content);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.likesCount)) {
        this.likesCount = data().deepCopy(fields()[4].schema(), other.likesCount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.dislikeCount)) {
        this.dislikeCount = data().deepCopy(fields()[5].schema(), other.dislikeCount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[6].schema(), other.createdAt);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[7].schema(), other.updatedAt);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing CommentAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.anonyshare.kafka.model.CommentAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.postId)) {
        this.postId = data().deepCopy(fields()[1].schema(), other.postId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = true;
      }
      this.userBuilder = null;
      if (isValidValue(fields()[3], other.content)) {
        this.content = data().deepCopy(fields()[3].schema(), other.content);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.likesCount)) {
        this.likesCount = data().deepCopy(fields()[4].schema(), other.likesCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dislikeCount)) {
        this.dislikeCount = data().deepCopy(fields()[5].schema(), other.dislikeCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[6].schema(), other.createdAt);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[7].schema(), other.updatedAt);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'postId' field.
      * @return The value.
      */
    public java.util.UUID getPostId() {
      return postId;
    }


    /**
      * Sets the value of the 'postId' field.
      * @param value The value of 'postId'.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder setPostId(java.util.UUID value) {
      validate(fields()[1], value);
      this.postId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'postId' field has been set.
      * @return True if the 'postId' field has been set, false otherwise.
      */
    public boolean hasPostId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'postId' field.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder clearPostId() {
      postId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public com.anonyshare.kafka.model.UserAvroModel getUser() {
      return user;
    }


    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder setUser(com.anonyshare.kafka.model.UserAvroModel value) {
      validate(fields()[2], value);
      this.userBuilder = null;
      this.user = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'user' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anonyshare.kafka.model.UserAvroModel.Builder getUserBuilder() {
      if (userBuilder == null) {
        if (hasUser()) {
          setUserBuilder(com.anonyshare.kafka.model.UserAvroModel.newBuilder(user));
        } else {
          setUserBuilder(com.anonyshare.kafka.model.UserAvroModel.newBuilder());
        }
      }
      return userBuilder;
    }

    /**
     * Sets the Builder instance for the 'user' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anonyshare.kafka.model.CommentAvroModel.Builder setUserBuilder(com.anonyshare.kafka.model.UserAvroModel.Builder value) {
      clearUser();
      userBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'user' field has an active Builder instance
     * @return True if the 'user' field has an active Builder instance
     */
    public boolean hasUserBuilder() {
      return userBuilder != null;
    }

    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder clearUser() {
      user = null;
      userBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'content' field.
      * @return The value.
      */
    public java.lang.String getContent() {
      return content;
    }


    /**
      * Sets the value of the 'content' field.
      * @param value The value of 'content'.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder setContent(java.lang.String value) {
      validate(fields()[3], value);
      this.content = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'content' field has been set.
      * @return True if the 'content' field has been set, false otherwise.
      */
    public boolean hasContent() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'content' field.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder clearContent() {
      content = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'likesCount' field.
      * @return The value.
      */
    public int getLikesCount() {
      return likesCount;
    }


    /**
      * Sets the value of the 'likesCount' field.
      * @param value The value of 'likesCount'.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder setLikesCount(int value) {
      validate(fields()[4], value);
      this.likesCount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'likesCount' field has been set.
      * @return True if the 'likesCount' field has been set, false otherwise.
      */
    public boolean hasLikesCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'likesCount' field.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder clearLikesCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'dislikeCount' field.
      * @return The value.
      */
    public int getDislikeCount() {
      return dislikeCount;
    }


    /**
      * Sets the value of the 'dislikeCount' field.
      * @param value The value of 'dislikeCount'.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder setDislikeCount(int value) {
      validate(fields()[5], value);
      this.dislikeCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'dislikeCount' field has been set.
      * @return True if the 'dislikeCount' field has been set, false otherwise.
      */
    public boolean hasDislikeCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'dislikeCount' field.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder clearDislikeCount() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public long getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder setCreatedAt(long value) {
      validate(fields()[6], value);
      this.createdAt = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder clearCreatedAt() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public long getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder setUpdatedAt(long value) {
      validate(fields()[7], value);
      this.updatedAt = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.anonyshare.kafka.model.CommentAvroModel.Builder clearUpdatedAt() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CommentAvroModel build() {
      try {
        CommentAvroModel record = new CommentAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.postId = fieldSetFlags()[1] ? this.postId : (java.util.UUID) defaultValue(fields()[1]);
        if (userBuilder != null) {
          try {
            record.user = this.userBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("user"));
            throw e;
          }
        } else {
          record.user = fieldSetFlags()[2] ? this.user : (com.anonyshare.kafka.model.UserAvroModel) defaultValue(fields()[2]);
        }
        record.content = fieldSetFlags()[3] ? this.content : (java.lang.String) defaultValue(fields()[3]);
        record.likesCount = fieldSetFlags()[4] ? this.likesCount : (java.lang.Integer) defaultValue(fields()[4]);
        record.dislikeCount = fieldSetFlags()[5] ? this.dislikeCount : (java.lang.Integer) defaultValue(fields()[5]);
        record.createdAt = fieldSetFlags()[6] ? this.createdAt : (java.lang.Long) defaultValue(fields()[6]);
        record.updatedAt = fieldSetFlags()[7] ? this.updatedAt : (java.lang.Long) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CommentAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<CommentAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CommentAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<CommentAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










